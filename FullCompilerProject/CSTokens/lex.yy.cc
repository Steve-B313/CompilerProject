/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
static yyconst short int yy_accept[440] =
    {   0,
        0,    0,  138,  138,  151,  150,   86,   82,   80,   87,
       84,   83,   89,   91,  101,  150,  104,  144,  103,  105,
       90,  109,  110,   94,   85,   99,   92,  100,   93,  146,
      146,  113,   98,   95,   97,   96,  115,  143,  111,   88,
      112,  102,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      107,  106,  108,  114,   81,  138,  139,  121,    0,  148,
      144,  144,    0,  130,  122,  132,    0,  128,  124,    0,
      126,  125,  127,  134,  137,  141,  129,  144,    0,  144,
      144,  146,  117,  118,  120,  119,  116,  143,  131,  143,

       48,  143,  143,  143,  143,  143,  143,  143,  143,  143,
       51,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,    1,  143,   25,   69,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  133,  123,  138,  139,  139,
      140,  147,  141,  141,  145,  136,  135,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,   67,   78,  143,  143,    5,  143,  143,  143,  143,

       55,  143,  143,  143,   14,  143,  143,  143,  143,  143,
      143,   72,  143,  143,  143,   79,  143,  143,  143,  143,
      143,  143,  143,  143,   75,  143,  143,  143,  143,  143,
      143,  143,   19,  143,  143,  143,  143,  141,  149,  145,
      143,   62,   20,  143,    7,   49,  143,   21,  143,  143,
      143,  143,  143,  143,  143,  143,   23,   38,  143,  143,
      143,  143,  143,  143,  143,  143,   11,  143,  143,  143,
       26,   40,  143,   70,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,   44,  143,  142,  143,   45,  143,  143,  143,

      143,  143,  143,   77,  143,  143,  143,   35,   63,  143,
        2,   50,  143,  143,  143,  143,  143,    9,  143,  143,
      143,   10,   53,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   43,  143,   58,
      143,  143,  143,  143,  143,  143,   17,  143,   18,  143,
      143,  143,   46,  143,  143,   47,  143,  143,  143,  143,
      143,  143,   65,  143,   66,  143,  143,  143,  143,  143,
      143,  143,   27,  143,  143,   71,  143,  143,    3,  143,
       29,   15,   73,  143,   16,   59,   74,   31,   32,  143,
       76,   33,  143,  143,  143,   36,  143,   22,   37,  143,

      143,   39,   24,  143,  143,  143,    4,  143,  143,  143,
       28,  143,  143,  143,  143,   61,  143,    6,   64,    8,
       52,   68,  143,   54,  143,   41,   56,  143,   57,  143,
      143,   34,   12,   13,   42,  143,   60,   30,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    3,    4,    5,
        6,    7,    8,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   28,   29,
       30,   31,   32,   13,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       34,   35,   36,   37,   33,   38,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[69] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    3,
        4,    3,    3,    3,    4,    4,    4,    4,    5,    3,
        4,    3,    3,    4,    6,    6,    4,    4,    4,    4,
        4,    3,    6,    4,    4,    4,    3,    4,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    4,    4,    4,    4,    1
    } ;

static yyconst short int yy_base[448] =
    {   0,
        0,    0,   64,   65,  525,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  494,  512,   60,   76,  492,   61,
        0,  526,  526,  491,   74,  526,   81,  526,   86,   92,
       96,  526,  526,   48,  490,   93,    0,    0,  526,  526,
      526,  489,   31,   75,   93,   82,   92,  102,  104,  110,
       74,   90,  105,  117,  475,  127,  114,  130,  132,  471,
      526,  128,  526,  526,  526,    0,  159,  526,  505,  526,
      163,    0,    0,  526,  526,  526,  499,  526,    0,  169,
      526,    0,  526,  526,  526,  490,  526,  165,  173,  175,
      177,  181,  483,  526,  526,  526,  482,    0,  526,  455,

        0,  454,  456,  465,  450,  152,  171,  467,  453,  172,
      446,  447,  444,  458,  111,  450,  159,  446,  443,  440,
      439,    0,  441,  437,    0,  435,   68,  441,  431,  440,
      441,  445,  430,  443,  430,   28,  444,  180,  421,  173,
      429,  418,  142,  433,  171,  169,  425,  426,  424,  180,
      182,  421,  420,  185,  427,  526,  526,    0,  214,  215,
      526,  526,    0,  449,  215,  526,  526,  415,  428,  420,
      430,  425,  424,  425,  410,  423,  407,  186,  415,  422,
      417,  419,  415,  406,  404,  405,  411,  397,  413,  408,
      411,  406,    0,  395,  397,  403,  394,  395,  398,  399,

        0,  391,  397,  384,    0,  383,  398,  377,  378,  384,
      391,    0,  374,  374,  380,    0,  374,  385,  203,  198,
      370,  370,  372,  381,    0,  380,  365,  369,  374,  380,
      365,  365,    0,  359,  373,  375,  363,  388,  526,  526,
      356,    0,    0,  361,    0,    0,  363,    0,  359,  351,
      349,  358,  353,  345,  357,  351,    0,    0,  343,  352,
      343,  354,  346,  353,  337,  354,    0,  345,  336,  350,
        0,    0,  333,    0,  347,  348,  331,  334,  345,  340,
      335,  328,  325,  336,  335,  320,  323,  326,  327,  321,
      331,  330,    0,  310,    0,  316,    0,  323,  324,  322,

      310,  319,  305,    0,  305,  318,  321,    0,    0,  316,
        0,    0,  306,  318,  306,  316,  311,    0,  312,  300,
      301,    0,    0,  309,  308,  202,  305,  293,  289,  288,
      297,  287,  285,  300,  299,  287,  286,    0,  295,    0,
      292,  296,  293,  288,  275,  285,    0,  286,    0,  288,
      285,  270,    0,  287,  278,    0,  283,  281,  264,  271,
      263,  262,    0,  271,    0,  255,  270,  268,  275,  274,
      257,  272,    0,  257,  267,    0,  265,  250,    0,  256,
        0,    0,    0,  255,    0,    0,    0,    0,    0,  255,
        0,    0,  253,  252,  244,    0,  257,    0,    0,  256,

      237,    0,    0,  231,  244,  232,    0,  235,  217,  215,
        0,  212,  191,  202,  208,    0,  207,    0,    0,    0,
        0,    0,  206,    0,  205,    0,    0,  205,    0,  152,
      108,    0,    0,    0,    0,   90,    0,    0,  526,  260,
      264,  268,  274,   87,  280,  286,  292
    } ;

static yyconst short int yy_def[448] =
    {   0,
      439,    1,  440,  440,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  441,  442,  442,   18,  439,
      443,  439,  439,   18,   18,  439,   18,  439,  439,   18,
       18,  439,  439,  439,  439,  439,   18,  444,  439,  439,
      439,   18,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      439,  439,  439,  439,  439,  445,  446,  439,  441,  439,
      442,   18,   18,  439,  439,  439,  439,  439,   18,   18,
      439,   18,  439,  439,  439,  447,  439,  442,   18,  442,
      442,   18,  439,  439,  439,  439,  439,  444,  439,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  439,  439,  445,  446,  446,
      439,  439,  447,  447,  439,  439,  439,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  447,  439,  439,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,    0,  439,
      439,  439,  439,  439,  439,  439,  439
    } ;

static yyconst short int yy_nxt[595] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,    6,   43,   44,
       45,   46,   47,   48,   49,   38,   50,   38,   38,   51,
       38,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       38,   38,   38,   61,   62,   63,   64,   65,    6,    6,
      100,   72,   72,   72,  208,   75,   93,   94,   72,   72,
      209,   72,   67,   67,   73,   73,  101,   72,   72,   72,
       76,   72,   98,   79,   72,   72,   72,   72,   80,   80,

       73,   73,   82,   81,   85,   80,   80,   72,  198,   86,
       83,   84,   72,  102,   88,   87,   89,   89,   88,  199,
       92,   92,   96,   97,  110,  126,  127,  103,  128,  104,
      438,  106,  129,   90,  111,   91,  105,   90,  107,   91,
      116,  112,  108,  113,  131,  109,  120,  130,  117,  437,
      114,  118,  115,  122,  119,  135,  121,  156,  132,  145,
      123,  124,  133,  134,  186,  125,  139,  187,  146,  140,
      152,  136,  141,  142,  137,  147,  148,  160,  153,  149,
      219,  150,  161,  143,  154,  151,  144,  439,  439,  165,
      165,   88,  157,   80,   80,   88,  220,   89,   89,  439,

      439,  439,  439,   88,  436,   92,   92,  173,  174,  175,
      189,  215,  179,  176,   90,  180,   91,  222,  211,  190,
      229,  181,   90,  212,   91,  223,  224,  231,  232,  216,
      225,  235,  439,  160,  236,  230,  213,  439,  161,  165,
      165,  251,  252,  288,  290,  369,  435,  434,  433,  432,
      431,  430,  429,  370,  428,  291,  239,  427,  240,  289,
       66,   66,   66,   66,   66,   66,   69,   69,   69,   69,
       71,  426,   71,   71,   77,  425,   77,   77,   77,   77,
      158,  424,  158,  158,  423,  158,  159,  422,  159,  159,
      159,  159,  163,  421,  163,  163,  163,  163,  420,  419,

      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  295,  320,  319,  318,

      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  164,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  238,  237,  234,  233,  228,  227,  226,  221,
      218,  217,  214,  210,  207,  206,  205,  204,  203,  202,
      201,  200,  197,  196,  195,  194,  193,  192,  191,  188,

      185,  184,  183,  182,  178,  177,  172,  171,  170,  169,
      168,  167,  166,  164,  162,   70,  155,  138,   99,   95,
       78,   74,   70,   68,  439,    5,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439

    } ;

static yyconst short int yy_chk[595] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
       43,   17,   17,   17,  136,   20,   34,   34,   17,   17,
      136,   17,    3,    4,   17,   17,   43,   18,   18,   18,
       20,   17,  444,   25,   18,   18,   17,   18,   25,   25,

       18,   18,   27,   25,   29,   27,   27,   18,  127,   29,
       27,   27,   18,   44,   30,   29,   30,   30,   31,  127,
       31,   31,   36,   36,   46,   51,   51,   44,   52,   44,
      436,   45,   52,   30,   46,   30,   44,   31,   45,   31,
       48,   47,   45,   47,   53,   45,   49,   52,   48,  431,
       47,   48,   47,   50,   48,   54,   49,   62,   53,   57,
       50,   50,   53,   53,  115,   50,   56,  115,   57,   56,
       59,   54,   56,   56,   54,   57,   58,   67,   59,   58,
      143,   58,   67,   56,   59,   58,   56,   71,   71,   88,
       88,   80,   62,   80,   80,   89,  143,   89,   89,   90,

       90,   91,   91,   92,  430,   92,   92,  106,  106,  107,
      117,  140,  110,  107,   89,  110,   89,  145,  138,  117,
      150,  110,   92,  138,   92,  145,  146,  151,  151,  140,
      146,  154,  159,  160,  154,  150,  138,  159,  160,  165,
      165,  178,  178,  219,  220,  326,  428,  425,  423,  417,
      415,  414,  413,  326,  412,  220,  165,  410,  165,  219,
      440,  440,  440,  440,  440,  440,  441,  441,  441,  441,
      442,  409,  442,  442,  443,  408,  443,  443,  443,  443,
      445,  406,  445,  445,  405,  445,  446,  404,  446,  446,
      446,  446,  447,  401,  447,  447,  447,  447,  400,  397,

      395,  394,  393,  390,  384,  380,  378,  377,  375,  374,
      372,  371,  370,  369,  368,  367,  366,  364,  362,  361,
      360,  359,  358,  357,  355,  354,  352,  351,  350,  348,
      346,  345,  344,  343,  342,  341,  339,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  325,  324,
      321,  320,  319,  317,  316,  315,  314,  313,  310,  307,
      306,  305,  303,  302,  301,  300,  299,  298,  296,  294,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  273,  270,
      269,  268,  266,  265,  264,  263,  262,  261,  260,  259,

      256,  255,  254,  253,  252,  251,  250,  249,  247,  244,
      241,  238,  237,  236,  235,  234,  232,  231,  230,  229,
      228,  227,  226,  224,  223,  222,  221,  218,  217,  215,
      214,  213,  211,  210,  209,  208,  207,  206,  204,  203,
      202,  200,  199,  198,  197,  196,  195,  194,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  164,  155,  153,  152,  149,  148,  147,  144,
      142,  141,  139,  137,  135,  134,  133,  132,  131,  130,
      129,  128,  126,  124,  123,  121,  120,  119,  118,  116,

      114,  113,  112,  111,  109,  108,  105,  104,  103,  102,
      100,   97,   93,   86,   77,   69,   60,   55,   42,   35,
       24,   19,   16,   15,    5,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
#define INITIAL 0
#line 2 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
	#include "yacc.hpp"
	#include <iostream>
	#include <istream>
	#include <ostream>	
	#include <FlexLexer.h>

	int lineNo = 1;
	int colNo = 1;

#define multilinecomment 1

#line 616 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"

#line 745 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 440 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 526 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_IF;
						}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_CLASS;
						}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 41 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_PUBLIC;
						}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_LNUMBER;
						}						
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 55 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_INT;
						}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_ABSTRACT;
						}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 73 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_BYTE;
						}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 80 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_DELEGATE;
						}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 87 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_EVENT;
						}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_FIXED;
						}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 101 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_GOTO;
						}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 108 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_INTERFACE;
						}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 115 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_NAMESPACE;
						}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_OUT;
						}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 129 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_SEALED;
						}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_STATIC;
						}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_THROW;
						}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 150 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_ULONG;
						}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_VAR;
						}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 164 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_BOOL;
						}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 175 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_CHAR;
						}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 186 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_DECIMAL;
						}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 193 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_ELSE;
						}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 200 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_FOREACH;
						}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 207 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_IN;
						}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 214 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_LOCK;
						}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 221 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_OBJECT;
						}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 228 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_PRIVATE;
						}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 235 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_RETURN;
						}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 242 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_STACKALLOC;
						}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 249 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_SWITCH;
						}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 256 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_TYPEOF;
						}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 263 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_USHORT;
						}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 274 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo +=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_VOLATILE;
						}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 281 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_BREAK;
						}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 288 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_CHECKED;
						}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 295 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_DEFAULT;
						}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 302 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_ENUM;
						}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 309 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_FINALLY;
						}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 316 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_LONG;
						}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 327 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_OPERATOR;
						}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 334 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_PROTECTED;
						}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 341 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_SBYTE;
						}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 348 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_THIS;
						}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 355 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_UINT;
						}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 362 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_USING;
						}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 369 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_WHILE;
						}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 376 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_AS;
						}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 383 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_CASE;
						}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 390 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_CONST;
						}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 397 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_DO;
						}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 404 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{	
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_EXPLICIT;
						}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 411 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_FLOAT;
						}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 422 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_INTERNAL;
						}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 429 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_NEW;
						}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 436 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_OVERRIDE;
						}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 443 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_READONLY;
						}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 450 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{	
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_SHORT;
						}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 461 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{	
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_STRING;
						}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 472 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_UNCHECKED;
						}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 479 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo+=strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_VIRTUAL;
						}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 486 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_BASE;
						}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 493 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_CATCH;
						}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 500 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_CONTINUE;
						}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 507 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_DOUBLE;
						}						
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 518 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_EXTERN;
						}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 525 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_FOR;
						}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 532 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_IMPLICIT;
						}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 539 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_IS;
						}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 546 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_NULL_LITERAL;
						}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 553 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_PARAMS;
						}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 560 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_REF;
						}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 567 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_SIZEOF;
						}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 574 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_STRUCT;
						}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 581 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_TRY;
						}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 588 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_UNSAFE;
						}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 595 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_VOID;
						}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 606 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_GET;
						}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 613 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_SET;
						}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 620 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += 3;
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	
						}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 627 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_STRING_END;
						}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 634 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							if(colNo>1)
								colNo--;
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_BACKSPACE;
						}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 642 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_BACKSLASH_F;
						}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 649 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_BACKSLASH_V;
						}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 656 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_BACKSLASH_PLUS;
						}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 663 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_BACKSLASH_A;
						}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 668 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
                            colNo=1;
                            lineNo +=1;
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        
                        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 676 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_DOUBLE_BACKSLASH;
						}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 683 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo=1;
							lineNo++;
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_BACKSLASH_R;
						}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 691 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
                        	return T_BACKSLASH_SINGLE_COTATION;
						}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 698 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += 1;
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							//return T_SPACE;
						}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 705 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_MINUS;
						}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 712 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_DEVIDE;
						}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 718 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_MULTIPLY;
						}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 725 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_SMALLER;
						}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 732 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;
							return T_BIGGER;
						}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 739 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_EQUAL;
						}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 746 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_SEMICOLON;
						}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 753 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_COMMA;
						}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 760 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_DOT;
						}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 767 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_NOT;
						}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 774 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_XOR;
						}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 781 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_MOD;
						}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 788 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_HASH;
						}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 795 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_AND;
						}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 802 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_OR;
						}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 809 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_OPEN_BRACKETS;
						}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 816 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_CLOSE_BRACKETS;
							
						}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 824 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_OPEN_PARENNTHESES;
						}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 831 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_CLOSE_PARENNTHESES;
						}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 838 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_OPEN_ARRAY;
						}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 849 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							char * x = new char[255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return T_CLOSE_ARRAY;
						}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 859 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_COLON;
						}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 866 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_TILDE;
						}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 873 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_QUESTION_MARK;
						}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 881 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_GTGT;
						}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 888 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_LTLT;
						}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 895 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_LEQ;
						}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 902 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_GEQ;
						}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 909 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_EQEQ;
						}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 916 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo; 
							return T_NOTEQ;
						}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 923 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_ANDAND;
						}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 930 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_OROR;
						}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 937 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_PLUSPLUS;
						}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 944 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_MINUSMINUS;
						}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 951 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_PLUSEQ; 
						}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 958 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_MINUSEQ; 
						}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 965 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_STAREQ; 
						}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 972 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_DIVEQ;
						}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 979 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_MODEQ; 
						}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 986 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_XOREQ; 
						}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 993 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_ANDEQ; 
						}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1000 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_OREQ; 
						}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1007 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_ARROW; 
						}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1014 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_GTGTEQ; 
						}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1021 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ 
							colNo += strlen(yytext);
							yylval.r.myLineNo=lineNo;
							yylval.r.myColNo=colNo;  
							return T_LTLTEQ; 
						}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1028 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ BEGIN multilinecomment; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1029 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1030 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{lineNo++;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1031 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{ BEGIN INITIAL;cout<<"\t it is a Multi Line Comment \n";}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1033 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										cout<<"\tit is a single line comment"<<endl;
										lineNo++;
									}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1038 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										colNo += strlen(yytext);
										return T_LITERAL_BOOLEAN;
									}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1043 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										colNo += strlen(yytext);
										char * x = new char[255];
										x[0] = '\0';
										strcpy(x, yytext);
										yylval.r.str = x;
										return T_IDENTIFIER;
									}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1052 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
                                       colNo += strlen(yytext);
									   return T_NOT_IDENTIFIER;
                                    }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1057 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										colNo += strlen(yytext);
										float f = atof(yytext);
										yylval.r.f = f;
										return T_LITERAL_FLOAT;
									}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1064 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										colNo += strlen(yytext);
										int i = atoi(yytext);
										yylval.r.i = i;
										if(strlen(yytext) <= 4)
											return T_LITERAL_INTEGER;
										else
											return T_LITERAL_LONG;
									}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1074 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										colNo += strlen(yytext);
										yylval.r.c = yytext[0];
										return T_LITERAL_CHARACTER;
									}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1081 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										string temp="";
										int i=0;
										for(i=0;i<strlen(yytext)-1;i++)
										{
											if(yytext[i]=='\\'){
												if(yytext[i+1]=='\\')
													temp+='\\';
												else if(yytext[i+1]=='n')
													temp+='\n';
												else if(yytext[i+1]=='b')
													{
														int d=temp.size();
														temp=temp.substr(0,d-1);
													}
												else if(yytext[i+1]=='t')
													temp+='\t';
												else if(yytext[i+1]=='a')
													temp+='\a';
												else if(yytext[i+1]=='f')
													temp+='\f';
												else if(yytext[i+1]=='v')
													temp+='\v';
												else if(yytext[i+1]=='0')
													temp+='\0';
												else 
													{cout<<"error";return 0;}
												i++;
											}
											else
												temp+=yytext[i];
										}
										if(i!=strlen(yytext)&&yytext[i]!='\\')
											temp+=yytext[i];
										yytext = (char *)malloc(temp.size() + 1);
										memcpy(yytext, temp.c_str(), temp.size() + 1);
										temp="";
										printf("%s",yytext);
										yylval.r.str = yytext;
										return T_LITERAL_STRING;
									}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1123 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
{
										colNo += strlen(yytext);
										return T_LITERAL_DOUBLE;
                                    }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1127 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
ECHO;
	YY_BREAK
#line 2385 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 68);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 440 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 68;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 440 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 439);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1127 "C:\\Users\\CEC\\Documents\\Visual Studio 2013\\Projects\\CSTokens\\lex.l"
